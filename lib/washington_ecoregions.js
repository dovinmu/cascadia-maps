// Generated by CoffeeScript 1.10.0
(function() {
  var changeText, getClassNameEco, getClassNameTree, getSubClassNameEco, height, initMap, loadJson, onClickEco, onClickTree, path, processTree, projection, region_trees, removeImages, selected, selectedText, selectedTextDetail, selectedTree, showImage, sizes, splitText, svg, tree_regions, width;

  width = 1350;

  height = 1160;

  selected = null;

  selectedTree = null;

  region_trees = {};

  tree_regions = {};

  sizes = {
    x: 90,
    y: 180,
    padding: 10
  };

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  projection = d3.geo.mercator().scale(7500).center([-121.5, 46.5]).translate([width / 3, height / 2]);

  path = d3.geo.path().projection(projection);

  svg.append('text').attr('x', width / 6).attr('y', 50.).attr('class', 'mapname').text('Washington state trees');

  initMap = function(error, ecotopo) {
    var data, j, len, ref;
    if (error) {
      return console.log(error);
    }
    data = topojson.feature(ecotopo, ecotopo.objects.ecoregions);
    svg.selectAll('.subunit').data(data.features).enter().append('path').attr('class', getClassNameEco).on('click', onClickEco).attr('d', path);
    svg.append("text").attr("x", width / 3).attr("y", height / 8).attr("class", "label").text("Northwestern Forested Mountains");
    svg.append("text").attr("x", width / 2.3).attr("y", height / 2.2).attr("class", "label").text("North American Deserts");
    svg.append("text").attr("x", width / 20).attr("y", height / 3.5).attr("class", "label").text("Marine West Coast Forest");
    ref = data.features;
    for (j = 0, len = ref.length; j < len; j++) {
      path = ref[j];
      region_trees[path.id] = [];
    }
    return loadJson('trees.json');
  };

  processTree = function(tree) {
    var j, len, ref, region;
    console.log("~~~" + tree["common"] + "~~~");
    ref = tree["regions"];
    for (j = 0, len = ref.length; j < len; j++) {
      region = ref[j];
      region_trees[region].push(tree["common"]);
    }
    return tree_regions[getClassNameTree(tree["common"])] = tree["regions"];
  };

  loadJson = function(fname) {
    console.log("loading", fname);
    return fetch(fname, {
      method: 'get'
    }).then(function(response) {
      return response.json();
    }).then(function(json) {
      var j, len, ref, results, tree;
      ref = json["trees"];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        tree = ref[j];
        results.push(processTree(tree));
      }
      return results;
    }).then(function() {
      return console.log(region_trees);
    })["catch"](function(e) {
      return console.log("FLAGRANT ERROR:", e);
    });
  };

  onClickTree = function(d, i) {
    var j, k, len, len1, region, region_list, results;
    if (selectedTree) {
      d3.select(selectedTree).style('opacity', '1');
      region_list = tree_regions[selectedTree.id];
      for (j = 0, len = region_list.length; j < len; j++) {
        region = region_list[j];
        d3.selectAll('.' + getSubClassNameEco(region)).style('-webkit-filter', 'grayscale(0%)');
      }
    }
    selectedTree = this;
    d3.select(selectedTree).style('opacity', '0.5');
    region_list = tree_regions[selectedTree.id];
    results = [];
    for (k = 0, len1 = region_list.length; k < len1; k++) {
      region = region_list[k];
      results.push(d3.selectAll('.' + getSubClassNameEco(region)).style('-webkit-filter', 'grayscale(100%)'));
    }
    return results;
  };

  onClickEco = function(d, i) {
    var j, k, len, len1, region, region_list, results, tree, tree_list, yOffset;
    if (selected) {
      selected.style('stroke', 'none');
    }
    if (selectedTree) {
      region_list = tree_regions[selectedTree.id];
      for (j = 0, len = region_list.length; j < len; j++) {
        region = region_list[j];
        d3.selectAll('.' + getSubClassNameEco(region)).style('-webkit-filter', 'grayscale(0%)');
      }
      selectedTree = null;
    }
    removeImages();
    selected = d3.select(this);
    selected.style('stroke', 'red');
    tree_list = region_trees[d.id];
    changeText(d.id.split(' ').slice(2).join(' '));
    yOffset = 0;
    results = [];
    for (i = k = 0, len1 = tree_list.length; k < len1; i = ++k) {
      tree = tree_list[i];
      results.push(showImage(tree, i));
    }
    return results;
  };

  showImage = function(name, i) {
    var fname, id, x, y;
    id = getClassNameTree(name);
    fname = id + ".jpg";
    y = 100 + (Math.floor(i / 3)) * (sizes.y + sizes.padding);
    if (i % 3 === 0) {
      x = width - 3 * (sizes.x + sizes.padding);
    }
    if (i % 3 === 1) {
      x = width - 2 * (sizes.x + sizes.padding);
    }
    if (i % 3 === 2) {
      x = width - 1 * (sizes.x + sizes.padding);
    }
    return svg.append("svg:image").attr("xlink:href", "images/" + fname).attr("x", x).attr("y", y).attr("width", sizes.x).attr("height", sizes.y).attr("id", id).on('click', onClickTree);
  };

  removeImages = function() {
    return svg.selectAll("image").remove();
  };

  getClassNameEco = function(d) {
    var l1, subclass;
    subclass = getSubClassNameEco(d.id);
    l1 = d.properties.L1.split(' ').slice(2);
    return 'subunit ' + l1.join('_') + ' ' + subclass;
  };

  getSubClassNameEco = function(s) {
    var l4;
    l4 = s.split(' ').slice(2);
    return l4.join('_').replace('/', '_');
  };

  getClassNameTree = function(s) {
    return s.toLowerCase().replace(/ /g, '_');
  };

  splitText = function(text) {
    var result, split;
    split = text.split(' ');
    result = '';
    while (result.length < 20) {
      result += split.shift() + ' ';
    }
    console.log(result);
    return console.log(split.join(' '));
  };

  selectedText = svg.append('text').attr('x', width - width / 4.5).attr('y', 70.).attr('class', 'selected title').text('');

  selectedTextDetail = svg.append('text').attr('x', width / 6 + 8).attr('y', 85.).attr('class', 'selected detail').text('');

  changeText = function(text, textDetail) {
    var overflow;
    overflow = '';
    if (text.length > 30) {
      splitText(text);
    }
    selectedText.transition().duration(100).style('opacity', 0).transition().duration(350).style('opacity', 1).text(text);
    if (!textDetail) {
      textDetail = '';
    }
    return selectedTextDetail.transition().duration(100).style('opacity', 0).transition().duration(350).style('opacity', 1).text(textDetail);
  };

  d3.json("washington.topojson", initMap);

  changeText('', 'Click on an ecological subregion to see its name.');

}).call(this);
