// Generated by CoffeeScript 1.12.6
(function() {
  var desertLabel, disclaimer, getClassNameEco, getClassNameTree, getColor, getSubClassNameEco, height, hideDisclaimer, hideLabels, initMap, lightenColor, loadJson, mapDescription, mapTitle, marineLabel, mountainLabel, onClickEco, onClickTree, overflow_limit, path, processTree, projection, region_trees, removeImages, selected, selectedTree, setTitleAndDescription, setTreeMenuText, shadeColor2, showDisclaimer, showImage, showLabels, sizes, splitText, svg, treeMenuOverflowText, treeMenuText, tree_regions, trees, width;

  width = 1350;

  height = 1160;

  selected = null;

  selectedTree = null;

  region_trees = {};

  tree_regions = {};

  trees = {};

  sizes = {
    x: 90,
    y: 180,
    padding: 10
  };

  overflow_limit = 25;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  projection = d3.geo.mercator().scale(7500).center([-121.5, 46.5]).translate([width / 3, height / 2]);

  path = d3.geo.path().projection(projection);

  marineLabel = null;

  mountainLabel = null;

  desertLabel = null;

  disclaimer = [];

  mapTitle = svg.append('text').attr('x', width / 6).attr('y', 50).attr('class', 'mapname').text('Washington state trees');

  mapDescription = svg.append('text').attr('x', width / 6 + 10).attr('y', 75).attr('class', 'selected detail').text('Click on an ecoregion to see the list of trees native to it.');

  treeMenuText = svg.append('text').attr('x', width - width / 4.5).attr('y', 70).attr('class', 'selected title').text('');

  treeMenuOverflowText = svg.append('text').attr('x', width - width / 4.5).attr('y', 90).attr('class', 'selected title').text('');

  $("#disclaimer").click(function() {
    return showDisclaimer();
  });

  initMap = function(error, ecotopo) {
    var data, i, k, l, len, len1, line, ref, ref1;
    if (error) {
      return console.log(error);
    }
    data = topojson.feature(ecotopo, ecotopo.objects.ecoregions);
    svg.selectAll('.subunit').data(data.features).enter().append('path').attr('class', getClassNameEco).on('click', onClickEco).attr('d', path).style('fill', getColor);
    mountainLabel = svg.append("text").attr("x", width / 3).attr("y", height / 8).attr("class", "label").text("Northwestern Forested Mountains");
    desertLabel = svg.append("text").attr("x", width / 2.3).attr("y", height / 2.2).attr("class", "label").text("North American Deserts");
    marineLabel = svg.append("text").attr("x", width / 20).attr("y", height / 3.5).attr("class", "label").text("Marine West Coast Forest");
    ref = ["Tree ranges are based on the data ", "available and not guaranteed to be", "accurate."];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      line = ref[i];
      disclaimer.push(svg.append("text").attr("x", width - width / 4.5).attr("y", 110 + i * 20).attr("class", "detail").style('opacity', 0).text(line));
    }
    ref1 = data.features;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      path = ref1[l];
      region_trees[path.id] = [];
    }
    return loadJson('trees.json');
  };

  processTree = function(tree) {
    var className, k, len, ref, region;
    console.log("~~~" + tree["common"] + "~~~");
    ref = tree["regions"];
    for (k = 0, len = ref.length; k < len; k++) {
      region = ref[k];
      region_trees[region].push(tree["common"]);
    }
    className = getClassNameTree(tree["common"]);
    tree_regions[className] = tree["regions"];
    return trees[className] = tree;
  };

  loadJson = function(fname) {
    console.log("loading", fname);
    return fetch(fname, {
      method: 'get'
    }).then(function(response) {
      return response.json();
    }).then(function(json) {
      var k, len, ref, results, tree;
      ref = json["trees"];
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        tree = ref[k];
        results.push(processTree(tree));
      }
      return results;
    }).then(function() {
      return console.log(region_trees);
    })["catch"](function(e) {
      return console.log("FLAGRANT ERROR:", e);
    });
  };

  onClickTree = function(d, i) {
    var description, k, l, len, len1, name, region, region_list;
    if (selectedTree) {
      d3.select(selectedTree).style('opacity', '1');
      region_list = tree_regions[selectedTree.id];
      for (k = 0, len = region_list.length; k < len; k++) {
        region = region_list[k];
        d3.selectAll('.' + getSubClassNameEco(region)).style('opacity', '1').style('color', getColor);
      }
    }
    selectedTree = this;
    d3.selectAll('image').style('opacity', '0.5');
    d3.select(selectedTree).style('opacity', '1');
    hideLabels();
    region_list = tree_regions[selectedTree.id];
    d3.selectAll(".subunit").style('opacity', '0.25');
    for (l = 0, len1 = region_list.length; l < len1; l++) {
      region = region_list[l];
      d3.selectAll('.' + getSubClassNameEco(region)).style('opacity', '1');
    }
    name = selectedTree.id.split('_').join(' ');
    name = name.charAt(0).toUpperCase() + name.slice(1);
    description = trees[selectedTree.id]['latin'];
    return setTitleAndDescription(name, description);
  };

  onClickEco = function(d, i) {
    var k, l, len, len1, region, region_list, results, tree, tree_list, yOffset;
    hideDisclaimer();
    if (selected) {
      selected.style('stroke', 'none');
    }
    if (selectedTree) {
      region_list = tree_regions[selectedTree.id];
      for (k = 0, len = region_list.length; k < len; k++) {
        region = region_list[k];
        d3.selectAll('.subunit').style('opacity', '1');
      }
      selectedTree = null;
      setTitleAndDescription('Washington state trees', 'Click on an ecoregion to see the list of trees native to it.');
      showLabels();
    }
    removeImages();
    selected = d3.select(this);
    selected.style('stroke', 'red');
    tree_list = region_trees[d.id];
    setTreeMenuText(d.id.split(' ').slice(2).join(' '));
    yOffset = 0;
    results = [];
    for (i = l = 0, len1 = tree_list.length; l < len1; i = ++l) {
      tree = tree_list[i];
      results.push(showImage(tree, i));
    }
    return results;
  };

  showImage = function(name, i) {
    var fname, id, x, y;
    id = getClassNameTree(name);
    fname = id + ".jpg";
    y = 100 + (Math.floor(i / 3)) * (sizes.y + sizes.padding);
    if (i % 3 === 0) {
      x = width - 3 * (sizes.x + sizes.padding);
    }
    if (i % 3 === 1) {
      x = width - 2 * (sizes.x + sizes.padding);
    }
    if (i % 3 === 2) {
      x = width - 1 * (sizes.x + sizes.padding);
    }
    return svg.append("svg:image").attr("xlink:href", "images/" + fname).attr("x", x).attr("y", y).attr("width", sizes.x).attr("height", sizes.y).attr("id", id).on('click', onClickTree);
  };

  removeImages = function() {
    return svg.selectAll("image").remove();
  };

  getClassNameEco = function(d) {
    var l1, subclass;
    subclass = getSubClassNameEco(d.id);
    l1 = d.properties.L1.split(' ').slice(2);
    return 'subunit ' + l1.join('_') + ' ' + subclass;
  };

  lightenColor = function(d, i) {
    var color;
    color = getColor(d, i);
    return shadeColor2(color, 0.05);
  };

  getColor = function(d, i) {
    var base, color, index, j, k, l1, l1_dict, l2, l4, l4_dict, len, letter, percent, ref;
    l1_dict = {
      '10': '#aa9900',
      '6': '#337711',
      '7': '#118855'
    };
    j = 0;
    l4_dict = {};
    ref = 'abcdefghijklmnopqrstuvwxyz';
    for (index = k = 0, len = ref.length; k < len; index = ++k) {
      letter = ref[index];
      l4_dict[letter] = index;
    }
    l1 = d.properties.L1.split(' ')[0];
    l4 = d.id.split(' ')[0];
    l2 = parseInt(l4.slice(0, -1));
    letter = l4.slice(-1);
    base = l1_dict[l1];
    percent = (l4_dict[letter] % 5) / 10;
    color = shadeColor2(base, percent);
    return color;
  };

  shadeColor2 = function(color, percent) {
    var B, G, R, f, p, t;
    f = parseInt(color.slice(1), 16);
    t = percent < 0 ? 0 : 255;
    p = percent < 0 ? percent * -1 : percent;
    R = f >> 16;
    G = f >> 8 & 0x00FF;
    B = f & 0x0000FF;
    return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
  };

  getSubClassNameEco = function(s) {
    var l4;
    l4 = s.split(' ').slice(2);
    return l4.join('_').replace('/', '_');
  };

  getClassNameTree = function(s) {
    return s.toLowerCase().replace(/ /g, '_');
  };

  splitText = function(text) {
    var result, split;
    split = text.split(' ');
    result = '';
    while (result.length < overflow_limit && split) {
      if (result.length + split[0].length <= overflow_limit) {
        result += split.shift() + ' ';
      } else {
        break;
      }
    }
    console.log(result, split);
    return [result, split.join(' ')];
  };

  setTitleAndDescription = function(title, description) {
    mapTitle.transition().duration(50).style('opacity', 0).transition().duration(250).style('opacity', 1).text(title);
    return mapDescription.transition().duration(50).style('opacity', 0).transition().duration(250).style('opacity', 1).text(description);
  };

  setTreeMenuText = function(text, detailText) {
    var list, overflow, split;
    overflow = '';
    if (text.length > overflow_limit) {
      list = splitText(text);
      text = list[0];
      overflow = list[1];
    }
    treeMenuText.transition().duration(50).style('opacity', 0).transition().duration(250).style('opacity', 1).text(text);
    treeMenuOverflowText.transition().duration(50).style('opacity', 0).transition().duration(250).style('opacity', 1).text(overflow);
    if (detailText) {
      return split = splitText(detailText);
    }
  };

  hideLabels = function() {
    console.log("hide");
    if (!marineLabel || !desertLabel || !mountainLabel) {
      console.log("null");
      return;
    }
    mountainLabel.transition().duration(50).style('opacity', 0);
    desertLabel.transition().duration(50).style('opacity', 0);
    return marineLabel.transition().duration(50).style('opacity', 0);
  };

  showLabels = function() {
    console.log("show");
    mountainLabel.transition().duration(50).style('opacity', 1);
    desertLabel.transition().duration(50).style('opacity', 1);
    return marineLabel.transition().duration(50).style('opacity', 1);
  };

  showDisclaimer = function() {
    var k, len, line, results;
    removeImages();
    setTreeMenuText("Disclaimer");
    results = [];
    for (k = 0, len = disclaimer.length; k < len; k++) {
      line = disclaimer[k];
      results.push(line.transition().duration(50).style('opacity', 1));
    }
    return results;
  };

  hideDisclaimer = function() {
    var k, len, line, results;
    results = [];
    for (k = 0, len = disclaimer.length; k < len; k++) {
      line = disclaimer[k];
      results.push(line.transition().duration(50).style('opacity', 0));
    }
    return results;
  };

  d3.json("washington.topojson", initMap);

  setTreeMenuText('', 'Click on an ecological subregion to see its name.');

}).call(this);
